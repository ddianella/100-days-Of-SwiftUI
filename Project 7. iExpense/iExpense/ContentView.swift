//
//  ContentView.swift
//  iExpense
//
//  Created by Prince$$ Di on 26.03.2021.
//

import SwiftUI

struct ExpenseItem: Identifiable, Codable {
    var id = UUID()
    let name: String
    let type: String
    let amount: Int
}

class Expenses: ObservableObject {
    @Published var items = [ExpenseItem]() {
        didSet {
            let encoder = JSONEncoder()
            if let encoded = try? encoder.encode(items) {
                UserDefaults.standard.set(encoded, forKey: "Items")
            }
        }
    }
    // 1. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–ª—é—á ¬´Items¬ª –∑ UserDefaults.
    // 2. –°—Ç–≤–æ—Ä—ñ—Ç—å –µ–∫–∑–µ–º–ø–ª—è—Ä JSONDecoder, —è–∫–∏–π —î –∞–Ω–∞–ª–æ–≥–æ–º JSONEncoder, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –≤—ñ–¥ –¥–∞–Ω–∏—Ö JSON –¥–æ –æ–±'—î–∫—Ç—ñ–≤ Swift.
    // 3. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –¥–µ–∫–æ–¥–µ—Ä –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥ UserDefaults, –≤ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ ExpenseItem.
    // 4. –Ø–∫—â–æ —Ü–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –Ω–∞–¥–∞–π—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ –≤–∏–π–¥—ñ—Ç—å.
    // 5. –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤.
    init() {
        if let items = UserDefaults.standard.data(forKey: "Items") {
            let decoder = JSONDecoder()
            if let decoded = try? decoder.decode([ExpenseItem].self, from: items) {
                self.items = decoded
                return
            }
        }
        
        self.items = []
    }
}

struct ContentView: View {
    
    @ObservedObject var expenses = Expenses()
    @State private var showingAddExpense = false
    
    var body: some View {
        NavigationView {
                    List {
                        ForEach(expenses.items) { item in
                            //Text(item.name)
                            HStack {
                                VStack(alignment: .leading) {
                                    Text(item.name)
                                        .font(.headline)
                                    Text(item.type)
                                }
                                Spacer()
                                //                        Text("$\(item.amount)")
                                //                            .font(.headline)
                                Text("$\(item.amount)")
                                    .foregroundColor(item.amount <= 100 ? .green : item.amount >= 100 && item.amount > 1000 ? .orange : .red)
                                    .font(item.amount <= 100 ? .title3 : item.amount >= 100 && item.amount > 1000 ? .title : .title2)
                            }
                        }
                        .onDelete(perform: removeItems)
                    }
                    .navigationBarTitle("üí∏ iExpense üí∏")
                    .navigationBarItems(leading: EditButton(), trailing:
                                            Button(action: {
                                                self.showingAddExpense = true
                                            }) {
                                                Image(systemName: "plus")
                                            }
                    )
                    .sheet(isPresented: $showingAddExpense) {
                        AddView(expenses: self.expenses)
                    }
                }
    }
    
    func removeItems(at offsets: IndexSet) {
        expenses.items.remove(atOffsets: offsets)
    }
    
}


struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
